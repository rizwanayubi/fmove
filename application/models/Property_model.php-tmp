<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Property_model extends CI_Model {
	function __construct() {
		parent::__construct();
	}

	/*
	 * Get property by prop_id
	 */
	function get_property($prop_id) {
		return $this->db->get_where('property', array('prop_id' => $prop_id))->row_array();
	}
	function get_propertys($stat) {
		return $this->db->get_where('property', array('status' => $stat))->result_array();
	}

	function get_propcount($postcodes) {
		$this->db->from('property');
		$this->db->where_in('town_id', $postcodes);

		// $data = $this->db->get()->result_array();
		return $this->db->count_all_results();

	}

	function get_prop_where($key, $value) {
		$this->load->model('Feature_model');
		$this->load->model('Prop_detail_model');
		$properties = $this->db->get_where('property', array($key => $value))->result_array();
		foreach ($properties as &$prop) {
			$feats                = $this->Feature_model->get_feature($prop['features']);
			$dets                 = $this->Prop_detail_model->get_prop_detail($prop['prop_details']);
			$prop['prop_details'] = $dets;
			$prop['features']     = $feats;
		}
		return $properties;
	}

	function get_propertyag($ag) {
		return $this->db->get_where('property', array('agent_id' => $ag))->result_array();
	}

	function search_property($params) {

		$this->db->select('*');
		$this->db->from('property');

		$this->db->join('prop_details', 'property.prop_id = prop_details.prop_id');
		$this->db->join('features', 'property.prop_id = features.prop_id');

		// print_r($params);
		die();

		if (!empty($params['keyword'])) {
			$this->db->like('title', $params['keyword']);
			$this->db->or_like('description', $params['keyword']);
			$this->db->or_like('excerpt', $params['keyword']);
		}

		$conditions = "";

		if (!empty($params['town_id'])) {
			$conditions .= 'town_id = "'.$params['town_id'].'" AND ';
		}
		if (!empty($params['prop_type'])) {
			$conditions .= ' prop_type = "'.$params['prop_type'].'" AND';
		}
		if (!empty($params['prop_stat'])) {
			$conditions .= ' status = "'.$params['prop_stat'].'" AND';
		}

		if (!empty($params['bath'])) {
			$conditions .= ' bathrooms = "'.$params['bath'].'" AND';
		}

		if (!empty($params['bed'])) {
			$conditions .= ' bedrooms = "'.$params['bed'].'" AND';
		}

		if (!empty($params['min_area'])) {
			$conditions .= ' prop_details.area >= "'.$params['min_area'].'" AND';
		}
		if (!empty($params['max_area'])) {
			$conditions .= ' prop_details.area <= "'.$params['max_area'].'" AND';
		}

		if (!empty($params['min_price'])) {
			$conditions .= ' price >= "'.$params['min_price'].'" AND';
		}

		if (!empty($params['max_price'])) {
			$conditions .= ' price <= "'.$params['max_price'].'" AND';
		}
		$conditions .= ' published = "1"';
		$this->db->where($conditions);
		// print_r($conditions);
		$query = $this->db->get();

		return $query->result_array();

	}

	/*
	 * Get all property
	 */
	function get_all_property() {
		$this->db->order_by('prop_id', 'asc');
		return $this->db->get('property')->result_array();
	}

	/*
	 * function to add new property
	 */
	function add_property($params) {
		$this->db->insert('property', $params);
		return $this->db->insert_id();
	}

	function add_propert($params) {
		$this->db->insert('property', $params['prop']);
		$id = $this->db->insert_id();
		$this->db->insert('features', $params['feat']);
		$this->db->insert('prop_details', $params['prop_details']);
		return $id;
	}

	/*
	 * function to update property
	 */
	function update_property($prop_id, $params) {
		$this->db->where('prop_id', $prop_id);
		return $this->db->update('property', $params);
	}

	/*
	 * function to delete property
	 */
	function delete_property($prop_id) {
		return $this->db->delete('property', array('prop_id' => $prop_id));
	}
}
